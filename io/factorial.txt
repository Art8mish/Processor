in
pop rax
push 1
pop rbx
jmp :start

start:
push rax
push 1
jbe :one

cycle:
call :iter
push rbx
push rax
push 1
je :end
pop rbx
jmp :cycle

iter:
push rbx
push rax
mul
pop rbx

push rax
push 1
sub
pop rax
ret

null:
push 0
jmp :end

one:
push 1
jmp :end

end:
out
hlt
